/*
 *  Copyright (c) 2021, The OpenThread Authors.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. Neither the name of the copyright holder nor the
 *     names of its contributors may be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 *  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package ot.Rpc;

message StatusResponse {
  bytes  mNetworkName     = 1;  ///< Thread Network Name
  uint32 mChannel         = 2;  ///< IEEE 802.15.4 Channel
  uint32 mDeviceRole      = 3;  ///< Current Thread role
  uint32 mPanId           = 4;  ///< IEEE 802.15.4 PAN ID
  uint64 mExtPanId        = 5;  ///< Thread Extended PAN ID
  uint64 mExtendedAddress = 6;  ///< IEEE 802.15.4 Extended Address
  uint32 mRloc16          = 7;  ///< The Server RLOC16
}

message ScanResponse {
  uint64 mExtAddress    = 1;  ///< IEEE 802.15.4 Extended Address
  bytes  mNetworkName   = 2;  ///< Thread Network Name
  uint64 mExtendedPanId = 3;  ///< Thread Extended PAN ID
  bytes  mSteeringData  = 4;  ///< Steering Data
  uint32 mPanId         = 5;  ///< IEEE 802.15.4 PAN ID
  uint32 mJoinerUdpPort = 6;  ///< Joiner UDP Port
  uint32 mChannel       = 7;  ///< IEEE 802.15.4 Channel
  int32  mRssi          = 8;  ///< RSSI (dBm)
  uint32 mLqi           = 9;  ///< LQI
  uint32 mVersion       = 10; ///< Version
  bool   mIsNative      = 11; ///< Native Commissioner flag
  bool   mIsJoinable    = 12; ///< Joining Permitted flag
}

message Dataset {
  bytes mTlvs = 1;
}

message Empty {}

service NcpService {
  rpc Status(Empty) returns (StatusResponse);
  rpc Scan(Empty) returns (stream ScanResponse);
  rpc Attach(Dataset) returns (Empty);
  rpc Detach(Empty) returns (Empty);
}
